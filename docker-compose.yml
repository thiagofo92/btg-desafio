services:
  # PostgreSQL Database
  postgres:
    image: postgres:17.5-alpine
    container_name: pg_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin_1234
    ports:
      - 5432:5432
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:4.1.3-management-alpine
    container_name: rabbitmq_broker
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - 5672:5672 # AMQP port
      - 9091:15672 # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  # Exemplo de aplicação (opcional)
  # app:
  #   build: .
  #   container_name: my_app
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/myapp
  #     RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy
  #   networks:
  #     - app-network

# Volumes persistentes
volumes:
  pg_data:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local

# Network para comunicação entre containers
networks:
  app-network:
    driver: bridge
